{"version":3,"sources":["../node_modules/react-bootstrap/esm/ListGroupItem.js","redux/phonebook/phonebook-selectors.js","components/ContactsList/ContactsList.jsx","components/ContactsForm/ContactsForm.jsx","components/Filter/Filter.jsx","views/ContactsView.js"],"names":["ListGroupItem","React","ref","bsPrefix","active","disabled","eventKey","className","variant","action","as","props","useBootstrapPrefix","useNavItem","key","makeEventKey","href","navItemProps","meta","handleClick","useEventCallback","event","preventDefault","stopPropagation","onClick","undefined","tabIndex","Component","_jsx","classNames","isActive","displayName","getContacts","state","phonebook","entities","getFilter","filter","getFilteredContacts","createSelector","contacts","normalizedFilter","toLowerCase","contact","name","includes","ContactList","useSelector","dispatch","useDispatch","useEffect","phonebookOperation","length","Container","map","id","number","Button","onDeleteContacts","ContactForm","useState","setName","setNumber","handleChange","e","target","value","Form","onSubmit","find","checkName","alert","Group","Label","Row","Col","Control","type","pattern","title","required","onChange","placeholed","Filter","style","display","changeFilter","onBlur","ContactsView","params","fetchContactsAction"],"mappings":"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","file":"static/js/contacts-page.55176962.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport useEventCallback from '@restart/hooks/useEventCallback';\nimport { useNavItem } from '@restart/ui/NavItem';\nimport { makeEventKey } from '@restart/ui/SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ListGroupItem = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  active,\n  disabled,\n  eventKey,\n  className,\n  variant,\n  action,\n  as,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'list-group-item');\n  const [navItemProps, meta] = useNavItem({\n    key: makeEventKey(eventKey, props.href),\n    active,\n    ...props\n  });\n  const handleClick = useEventCallback(event => {\n    if (disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    navItemProps.onClick(event);\n  });\n\n  if (disabled && props.tabIndex === undefined) {\n    props.tabIndex = -1;\n    props['aria-disabled'] = true;\n  } // eslint-disable-next-line no-nested-ternary\n\n\n  const Component = as || (action ? props.href ? 'a' : 'button' : 'div');\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    ...navItemProps,\n    onClick: handleClick,\n    className: classNames(className, bsPrefix, meta.isActive && 'active', disabled && 'disabled', variant && `${bsPrefix}-${variant}`, action && `${bsPrefix}-action`)\n  });\n});\nListGroupItem.displayName = 'ListGroupItem';\nexport default ListGroupItem;","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getContacts = state => state.phonebook.entities;\r\nexport const getFilter = state => state.phonebook.filter;\r\nexport const getLoading = state => state.contacts.isLoading;\r\nexport const getError = state => state.contacts.error;\r\n\r\nexport const getFilteredContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Container, Button, ListGroupItem } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport * as phonebookOperation from '../../redux/phonebook/phonebook-operations';\nimport { getFilteredContacts } from '../../redux/phonebook/phonebook-selectors';\n\nconst ContactList = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(phonebookOperation.fetchContactsAction());\n  }, [dispatch]);\n\n  const onDeleteContacts = id =>\n    dispatch(phonebookOperation.deleteContactAction(id));\n\n  if (contacts.length === 0) {\n    return <h2 className=\"home-title\">There are no contacts in the list</h2>;\n  } else {\n    return (\n      <Container>\n        <h2>List of contacts</h2>\n        {contacts.map(({ id, name, number }) => (\n          <ListGroupItem key={id}>\n            {name} : {number}\n            <Button onClick={() => onDeleteContacts(id)}>Delete</Button>\n          </ListGroupItem>\n        ))}\n      </Container>\n    );\n  }\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    }),\n  ),\n  onDeleteContacts: PropTypes.func,\n};\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Form, Col, Row, Button, Container } from 'react-bootstrap';\nimport * as phonebookOperation from '../../redux/phonebook/phonebook-operations';\nimport { useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/phonebook/phonebook-selectors';\n\nexport function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const onSubmit = (name, number) =>\n    dispatch(phonebookOperation.addContactAction({ name, number }));\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    name === 'name' ? setName(value) : setNumber(value);\n  };\n\n  const checkName = name => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (checkName(name)) {\n      alert(`${name} is already in contacts`);\n    } else {\n      onSubmit(name, number);\n      setName('');\n      setNumber('');\n    }\n  };\n\n  return (\n    <Container>\n      <Form onSubmit={handleSubmit}>\n        <Form.Group>\n          <h2>Add new contact</h2>\n          <Form.Label>Name</Form.Label>\n          <Row>\n            <Col>\n              <Form.Control\n                type=\"text\"\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"The name can only consist of letters, apostrophes, dashes and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n                value={name}\n                onChange={handleChange}\n                placeholed=\"Enter name\"\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <Form.Label>Mobil</Form.Label>\n              <Form.Control\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n                value={number}\n                onChange={handleChange}\n                placeholed=\"Enter mobile number\"\n              />\n            </Col>\n          </Row>\n        </Form.Group>\n        <Row>\n          <Col>\n            <Button type=\"submit\">Add to contact list</Button>\n          </Col>\n        </Row>\n      </Form>\n    </Container>\n  );\n}\n\nexport default ContactForm;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { Form, Container } from 'react-bootstrap';\nimport PropTypes from 'prop-types';\nimport { getFilter } from '../../redux/phonebook/phonebook-selectors';\nimport { changeFilter } from '../../redux/phonebook/phonebook-actions';\nimport { getContacts } from '../../redux/phonebook/phonebook-selectors';\n\nconst Filter = () => {\n  const contacts = useSelector(getContacts);\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onChangeHandler = event => dispatch(changeFilter(event.target.value));\n  const onBlurHandler = () => dispatch(changeFilter(''));\n\n  if (contacts.length === 0) {\n    return <h2 style={{ display: 'none' }}>Search</h2>;\n  } else {\n    return (\n      <Container>\n        <Form>\n          <Form.Group>\n            <h2>Find a contact by name </h2>\n            <Form.Control\n              type=\"text\"\n              value={value}\n              onChange={onChangeHandler}\n              onBlur={onBlurHandler}\n            />\n          </Form.Group>\n        </Form>\n      </Container>\n    );\n  }\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n};\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContactsAction } from '../redux/phonebook/phonebook-operations';\nimport ContactList from '../components/ContactsList/ContactsList.jsx';\nimport ContactForm from '../components/ContactsForm/ContactsForm.jsx';\nimport Filter from '../components/Filter/Filter';\n\nexport default function ContactsView(params) {\n  const dispatch = useDispatch();\n\n  useEffect(() => dispatch(fetchContactsAction()), [dispatch]);\n\n  return (\n    <div>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n"],"sourceRoot":""}